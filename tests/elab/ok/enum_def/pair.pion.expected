enum Pair(A: Type, B: Type): Type {
    MkPair(x: A, y: B): Pair(A, B),
}

let mkpair: fn(A: Type, B: Type, x: A, y: B) -> Pair(A, B) = MkPair;

let fst: fn(A: Type, B: Type, p: Pair(A, B)) -> A = fn(A: Type, B: Type, p: Pair(A, B)) => match p {
    MkPair(z, foo) => z,
};

let fst_ann: fn(X: Type, Y: Type, q: Pair(X, Y)) -> X = fn(A: Type, B: Type, p: Pair(A, B)) => match p {
    MkPair(z, foo) => z,
};
