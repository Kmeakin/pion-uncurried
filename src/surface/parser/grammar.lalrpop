use std::sync::Arc;

use text_size::TextSize;
use text_size::TextRange;

use crate::surface::syntax::*;
use crate::surface::errors::*;
use crate::surface::parser::lexer::*;
use crate::span::Span;

grammar<'src>(
);

extern {
    type Location = TextSize;
    type Error = LexError;

    enum Token<'src> {
        "_" =>          Token::Underscore,
        "Name" =>       Token::Name(<&'src str>),
        "Hole" =>       Token::Hole(<&'src str>),

        "(" =>          Token::LParen,
        ")" =>          Token::RParen,
        "{" =>          Token::LCurly,
        "}" =>          Token::RCurly,

        "->" =>         Token::SingleArrow,
        "=>" =>         Token::DoubleArrow,
        "=" =>          Token::Eq,
        ":" =>          Token::Colon,
        ";" =>          Token::Semicolon,
        "," =>          Token::Comma,

        "enum" =>       Token::KwEnum,
        "false" =>      Token::KwFalse,
        "fn" =>         Token::KwFn,
        "in" =>         Token::KwIn,
        "let" =>        Token::KwLet,
        "match" =>      Token::KwMatch,
        "true" =>       Token::KwTrue,
    }
}

pub Module: Module<Span> = {
    <items: Item*> => Module{items},
}

pub Item: Item<Span> = {
    LetDef => Item::Let(<>),
    EnumDef => Item::Enum(<>),
}

pub LetDef: LetDef<Span> = {
    "let" <name: Name> <ty: (":" <Expr>)?> "=" <body: Expr> ";" => LetDef {name, ty, body},
}

pub EnumDef: EnumDef<Span> = {
    "enum" <name: Name> <args: ("(" <List<AnnPat ,",">> ")")?> <ret_type: (":" <Expr>)?> "{" <variants: List<EnumVariant, ",">> "}" => EnumDef {name, args: args.unwrap_or_default(), ret_type, variants},
}

pub EnumVariant: EnumVariant<Span> = {
    <name: Name> <args: ("(" <List<AnnPat ,",">> ")")?> <ret_type: (":" <Expr>)?> => EnumVariant {name, args: args.unwrap_or_default(), ret_type},
}

pub Expr: Expr<Span> = {
    LetExpr => <>,
}

LetExpr: Expr<Span> = {
    <start: @L> "let" <pat: AnnPat> "=" <init: Expr> "in" <body: Expr> <end: @R> => Expr::Let(TextRange::new(start, end), Arc::new(pat), Arc::new(init), Arc::new(body)),
    FunExpr => <>,
}

FunExpr: Expr<Span> = {
    <start: @L> "fn" "(" <args: List<AnnPat, ",">> ")" "=>" <body: FunExpr> <end: @R> => Expr::FunExpr(TextRange::new(start, end), args, Arc::new(body)),
    <start: @L> "fn" "(" <args: List<AnnPat, ",">> ")" "->" <body: FunExpr> <end: @R> => Expr::FunType(TextRange::new(start, end), args, Arc::new(body)),
    CallExpr => <>,
}

CallExpr: Expr<Span> = {
    <start: @L> <fun: CallExpr> "(" <args: List<Expr, ",">> ")" <end: @R> => Expr::FunCall(TextRange::new(start, end), Arc::new(fun), args),
    AtomExpr => <>,
}

AtomExpr: Expr<Span> = {
    "(" <expr: Expr> ")" => expr,
    <start: @L> <lit: Lit> <end: @R> => Expr::Lit(Span::new(start, end), lit),
    <start: @L> <name: Name> <end: @R> => Expr::Name(Span::new(start, end), name),
    <start: @L> <hole: Hole> <end: @R> => Expr::Hole(TextRange::new(start, end), hole),
    <start: @L> "match" <scrutinee: Expr> "{" <arms: List<(<Pat> "=>" <Expr>), ",">> "}" <end: @R> => Expr::Match(TextRange::new(start, end), Arc::new(scrutinee), arms),
}

pub Hole: Hole = {
    <name: "Hole"> => {
        if name == "?_" { Hole::Underscore } else { Hole::Name(name.into()) }
    }
}

pub Pat: Pat<Span> = {
    "(" <pat: Pat> ")" => pat,
    <start: @L> "_" <end: @R> => Pat::Wildcard(Span::new(start, end)),
    <start: @L> <lit: Lit> <end: @R> => Pat::Lit(Span::new(start, end), lit),
    <start: @L> <name: Name> <end: @R> => Pat::Name(Span::new(start, end), name),
    <start: @L> <name: Name> "(" <pats: List<Pat, ",">> ")" <end: @R> => Pat::Variant(Span::new(start, end), name, pats),
}

AnnPat: AnnPat<Span> = {
    <pat: Pat> <ty: (":" <Expr>)?> => AnnPat {pat, ty},
}

pub Lit: Lit<Span> = {
    <start: @L> <b: Bool> <end: @R> => Lit::Bool(Span::new(start, end), b),
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

Name: String = {
    <s: "Name"> => s.into(),
}

#[inline]
List<T, Sep>: Vec<T> = {
    <mut elems: (<T> Sep)*> <last: T?> => {
        elems.extend(last);
        elems
    }
}